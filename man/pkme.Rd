% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkme.R
\name{pkme}
\alias{pkme}
\title{Solve PK or PBPK model in matrix form}
\usage{
pkme(
  minute,
  h,
  rate_coeff,
  init_condition,
  pars,
  number_of_doses,
  dose,
  start_time,
  stop_time,
  dose_comp = 1
)
}
\arguments{
\item{minute}{The number of minutes the model will simulate out}

\item{h}{The step size specified for Simpson's 1/3 rule}

\item{rate_coeff}{A matrix of rates - flow/volume corresponding to the equation/compartment (row) and concentration to be multiplied by (column)}

\item{init_condition}{A column vector of initial conditions (concentrations) for each equation/compartment (row)}

\item{pars}{A matrix of parameters defining the variables in the rate coefficient matrix and the initial conditions, if necessary}

\item{number_of_doses}{A scalar indicating number of doses}

\item{dose}{A vector of doses corresponding to the "ith" start and stop time vector}

\item{start_time}{A vector of start times for an "i" number of doses}

\item{stop_time}{A vector of stop times for an "i" number of doses}

\item{dose_comp}{Designate which compartment to place the dose -> default is 1}
}
\value{
x_matrix_save A matrix of the concentrations in each compartment (rows) versus the time course (columns) for a given step size "h". Each column represents a predicted data point at every "2*h"
}
\description{
Takes in initial condition matrix (single column vector of initial concentrations) and a rate
coefficient matrix (flow/volume), dose profile (number of doses, start and stop time of each dose)
along with any parameters needed to solve the system, and outputs a matrix of the concentrations
in each compartment (rows) versus the time course (columns) for a given step size "h". Each column
represents a predicted data point at every "2*h"
}
\examples{
# Simple one-compartment PK model:
dt = 0.5
pmat = matrix(0, nrow=1, ncol=1)
pmat[1,1] = -k10
init = matrix(0, nrow=1, ncol=1)
pkme(minute = 10, h = dt, rate_coeff = pmat, init_condition = init,
            pars = c(CL = 2.08, V = 7.88, k10 = CL/V), number_of_doses = 1,
            dose = 30, start_time = 0, stop_time = dt)
            #(for bolus, set length of infusion equal to 'dt'/time step)
}
